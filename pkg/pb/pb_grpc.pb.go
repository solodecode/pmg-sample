// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogueClient is the client API for Catalogue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogueClient interface {
	AddItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	GetItem(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*Item, error)
	AddListItem(ctx context.Context, opts ...grpc.CallOption) (Catalogue_AddListItemClient, error)
}

type catalogueClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogueClient(cc grpc.ClientConnInterface) CatalogueClient {
	return &catalogueClient{cc}
}

func (c *catalogueClient) AddItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, "/pmg_pb.Catalogue/addItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueClient) GetItem(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/pmg_pb.Catalogue/getItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueClient) AddListItem(ctx context.Context, opts ...grpc.CallOption) (Catalogue_AddListItemClient, error) {
	stream, err := c.cc.NewStream(ctx, &Catalogue_ServiceDesc.Streams[0], "/pmg_pb.Catalogue/addListItem", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogueAddListItemClient{stream}
	return x, nil
}

type Catalogue_AddListItemClient interface {
	Send(*Item) error
	Recv() (*wrapperspb.UInt64Value, error)
	grpc.ClientStream
}

type catalogueAddListItemClient struct {
	grpc.ClientStream
}

func (x *catalogueAddListItemClient) Send(m *Item) error {
	return x.ClientStream.SendMsg(m)
}

func (x *catalogueAddListItemClient) Recv() (*wrapperspb.UInt64Value, error) {
	m := new(wrapperspb.UInt64Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatalogueServer is the server API for Catalogue service.
// All implementations must embed UnimplementedCatalogueServer
// for forward compatibility
type CatalogueServer interface {
	AddItem(context.Context, *Item) (*wrapperspb.UInt64Value, error)
	GetItem(context.Context, *wrapperspb.UInt64Value) (*Item, error)
	AddListItem(Catalogue_AddListItemServer) error
	mustEmbedUnimplementedCatalogueServer()
}

// UnimplementedCatalogueServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogueServer struct {
}

func (UnimplementedCatalogueServer) AddItem(context.Context, *Item) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedCatalogueServer) GetItem(context.Context, *wrapperspb.UInt64Value) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedCatalogueServer) AddListItem(Catalogue_AddListItemServer) error {
	return status.Errorf(codes.Unimplemented, "method AddListItem not implemented")
}
func (UnimplementedCatalogueServer) mustEmbedUnimplementedCatalogueServer() {}

// UnsafeCatalogueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogueServer will
// result in compilation errors.
type UnsafeCatalogueServer interface {
	mustEmbedUnimplementedCatalogueServer()
}

func RegisterCatalogueServer(s grpc.ServiceRegistrar, srv CatalogueServer) {
	s.RegisterService(&Catalogue_ServiceDesc, srv)
}

func _Catalogue_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmg_pb.Catalogue/addItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServer).AddItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalogue_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmg_pb.Catalogue/getItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServer).GetItem(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalogue_AddListItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CatalogueServer).AddListItem(&catalogueAddListItemServer{stream})
}

type Catalogue_AddListItemServer interface {
	Send(*wrapperspb.UInt64Value) error
	Recv() (*Item, error)
	grpc.ServerStream
}

type catalogueAddListItemServer struct {
	grpc.ServerStream
}

func (x *catalogueAddListItemServer) Send(m *wrapperspb.UInt64Value) error {
	return x.ServerStream.SendMsg(m)
}

func (x *catalogueAddListItemServer) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Catalogue_ServiceDesc is the grpc.ServiceDesc for Catalogue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalogue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmg_pb.Catalogue",
	HandlerType: (*CatalogueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addItem",
			Handler:    _Catalogue_AddItem_Handler,
		},
		{
			MethodName: "getItem",
			Handler:    _Catalogue_GetItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "addListItem",
			Handler:       _Catalogue_AddListItem_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb.proto",
}
